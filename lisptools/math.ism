;you'll probbably want this
random-source-randomize! default-random-source

def ++ x
    + x
      1
def -- x
    - x
      1

def <<
    fxarithmetic-shift-left
def >>
    fxarithmetic-shift-right

;Uses the masraglia algorithm to make a random number
;with normal distribution of my=0 and sigma^2=1
;This gives a spread of about from -4 to 4
;and with 40% probability of becoming close to 0
(define (marsaglia)
  (let ((x (random-real))
        (y (random-real)))
    (let ((s (+ (* x x) (* y y))))
      (if (> 1 s)
        (let ((s2 (sqrt (/ (* -2 (log s)) s))))
          (* x s2)) ;(* y s2) is unused
        (marsaglia)))))


(define hexchars (string->list "0123456789ABCDEF"))
(define (byte->hex num)
  (list->string (list (list-ref hexchars (<< (fxand num #xf0) -4))
                      (list-ref hexchars (& num #xf)))))


(define (num->intel16 num)
  (list (fxand num #xff)
        (<< (fxand num #xff00) -8)))
(define (num->intel32 num)
  (append (num->intel16 (bitwise-and num #xffff))
          (num->intel16 (arithmetic-shift num -16))))

(define (num->motor16 num)
  (list (fxarithmetic-shift (fxand num #xff00) -8)
        (fxand num #xff)))
(define (num->motor32 num)
  (append (num->motor16 (arithmetic-shift num -16))
          (num->motor16 (bitwise-and num #xffff))))

(define (floor->exact n)
  (inexact->exact (flfloor (exact->inexact n))))
